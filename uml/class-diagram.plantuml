@startuml

package sxeval {

    note as T_Note
        Supported types for <b>T</b>:
            <i>int</i>
            <i>signed char</i>
            <i>short int</i>
            <i>long int</i>
            <i>unsigned int</i>
            <i>unsigned char</i>
            <i>unsigned long int</i>
            <i>float</i>
            <i>double</i>
            <i>long double</i>
    end note

    note as alias_Note
        Types definitions:
            <b>resolveVariable_t</b>: std::function<T&(const char*)>
            <b>resolveEncapsulated_t</b>: std::function<std::function<T(void)>(const char*)>
    end note

    class SXEval<T> {
        - _Node : struct {instruct : std::unique_ptr<AInstruction<T>>, subnodes : std::vector<_Node>}
        -_operations : std::vector<std::unique_ptr<AOperation<T>>>
        -_encapsulated : std::vector<EncapsulatedVariable<T>*>
        -_resolveEncapsulated : const resolveEncapsulated_t<T>
        -_lastOperation : _Node
        +SXEval()
        +SXEval(exp : char*, const resolveVariable_t& resolveVariable, const resolveEncapsulated_t resolveEncapsulated)
        +SXEval(exp : char*, const resolveEncapsulated_t resolveEncapsulated, const resolveVariable_t& resolveVariable)
        +evaluate() : T
        -_skipChars(exp : char**)
        -_getNextSymbol(exp : char**) : char*
        -_build(exp : char**, resolveVariable : const resolveVariable_t<T>&)  : _Node
    }


    abstract class AInstruction<T> {
        -_result : T&
        +AInstruction(result : T&)
        +getResult() : T
    }

    abstract class AOperation<T> extends AInstruction {
        #_args : const std::vector<AInstruction<T>*>
        #_result : T
        +AOperation(args : const std::vector<AInstruction<T>*>&)
        +{abstract} execute()
    }

    abstract class AOperand<T> extends AInstruction {
        +AOperand(result : T&)
    }

    class Value<T> extends AOperand {
        -_val : T
        +Value(val : T)
    }

    class Variable<T> extends AOperand {
        +Variable(var : T&)
    }

    class EncapsulatedVariable<T> extends AOperand {
        -_var : T
        -_get : const std::function<T(void)>&
        +Variable(get : const std::function<T(void)>&)
        +retrieve()
    }

    package operations {

        class Operations<T> {
            +{static} UNLIMITED_ARITY : const int := -1
            +{static} create(key : const std::string&, args : const std::vector<AInstruction<T>*>) : std::unique_ptr<AOperation<T>>
            -{static} checkArity(key : const std::string&, nArgs : int, arityMin : int, arityMax : int)
        }

        class Addition<T> {
            #{static} KEY : const char* := "+"
            #{static} ARITY_MIN : const int := 2
            #{static} ARITY_MAX : const int := Operations<T>::UNLIMITED_ARITY
            #Addition(args : const std::vector<AInstruction<T>*>&)
            +execute()
        }

        class Greater<T> {
            #{static} KEY : const char* := ">"
            #{static} ARITY_MIN : const int := 2
            #{static} ARITY_MAX : const int := 2
            #Greater(args : const std::vector<AInstruction<T>*>&)
            +execute()
        }

        Addition -up-|> AOperation
        Greater -up-|> AOperation

        note "The other operations are omitted for clarity." as ope_Note
        Addition .. ope_Note
        Greater .. ope_Note

    }

    SXEval *--> AInstruction : _Node::instruct\n0..*
    SXEval o--> AOperation : _operations\n0..*
    SXEval o--> EncapsulatedVariable : _encapsulated\n0..*
    AOperation o-up-> AInstruction : _args\n0..*

}

@enduml

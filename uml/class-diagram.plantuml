@startuml

package sxeval {

    note as T_Note
        Supported types for <b>T</b>:
            <i>int</i>
            <i>signed char</i>
            <i>short int</i>
            <i>long int</i>
            <i>unsigned int</i>
            <i>unsigned char</i>
            <i>unsigned long int</i>
            <i>float</i>
            <i>double</i>
            <i>long double</i>
    end note

    note as alias_Note
        Types definitions:
            <b>resolveVariable_t</b>: std::function<T&(const char*)>
            <b>resolveEncapsulated_t</b>: std::function<std::function<T(void)>(const char*)>
    end note

    class SXEval<T> {
        - _Node : struct {instruct : std::unique_ptr<AInstruction<T>>, parent : _Node*, subnodes : std::vector<_Node>}
        -_operations : std::vector<std::unique_ptr<AOperation<T>>>
        -_encapsulated : std::vector<EncapsulatedVariable<T>*>
        -_resolveEncapsulated : const resolveEncapsulated_t<T>
        -_lastOperation : _Node
        -_operationsFactory : OperationsFactory<T>
        +SXEval()
        +template registerOperation<OP>()
        +build(exp : char*, const resolveVariable_t& resolveVariable, const resolveEncapsulated_t resolveEncapsulated)
        +build(exp : char*, const resolveEncapsulated_t resolveEncapsulated, const resolveVariable_t& resolveVariable)
        +evaluate() : T
        +toString() : std::string
        -_skipChars(exp : char**)
        -_getNextSymbol(exp : char**) : char*
        -_build(exp : char**, resolveVariable : const resolveVariable_t<T>&)  : _Node
        -_fillParents(parent : _Node&)
        -_buildTreeStr(std::opstream& os, const _Node& node, size_t depth) : void
    }


    abstract class AInstruction<T> {
        -getResult() : T&
        +AInstruction(result : T&)
        +getResult() : T
        +toString() : std::string
    }

    abstract class AOperation<T> extends AInstruction {
        +{static} UNLIMITED_ARITY : const int := -1
        -_args : const std::vector<AInstruction<T>*>
        -getResult() : T
        +AOperation(args : const std::vector<AInstruction<T>*>&)
        +getArgs() : const std::vector<AInstruction<T>*>&
        +getResult() : T&
        +{abstract} execute()
    }

    abstract class AOperand<T> extends AInstruction {
        +AOperand(result : T&)
    }

    class Value<T> extends AOperand {
        -_val : T
        +Value(val : T)
        +toString() : std::string
    }

    class Variable<T> extends AOperand {
        +Variable(var : T&, name : const std::string&)
        +toString() : std::string
    }

    class EncapsulatedVariable<T> extends AOperand {
        -_var : T
        -_get : const std::function<T(void)>&
        +Variable(get : const std::function<T(void)>&, name : const std::string&)
        +retrieve()
        +toString() : std::string
    }

    package operations {

        class OperationsFactory<T> {
            -_operations : std::map<std::string, std::function<std::unique_ptr<AOperation<T>>(const std::vector<AInstruction<T>*>&)>>
            +OperationsFactory()
            +template add<OP>()
            +create(key : const std::string&, args : const std::vector<AInstruction<T>*>) : std::unique_ptr<AOperation<T>>
        }

        class Addition<T> {
            #{static} KEY : const char* := "+"
            #{static} ARITY_MIN : const int := 2
            #{static} ARITY_MAX : const int := AOperation<T>::UNLIMITED_ARITY
            +Addition(args : const std::vector<AInstruction<T>*>&)
            +execute()
            +toString() : std::string
        }

        class SquareRoot<T> {
            #{static} KEY : const char* := "sqrt"
            #{static} ARITY_MIN : const int := 1
            #{static} ARITY_MAX : const int := 1
            +SquareRoot(args : const std::vector<AInstruction<T>*>&)
            +execute()
            +toString() : std::string
        }

        Addition -up-|> AOperation
        SquareRoot -up-|> AOperation

        note "The other operations are omitted for clarity." as ope_Note
        Addition .. ope_Note
        SquareRoot .. ope_Note

    }

    SXEval *--> AInstruction : _Node::instruct\n0..*
    SXEval *--> OperationsFactory : _operationsFactory\n1..1
    SXEval o--> AOperation : _operations\n0..*
    SXEval o--> EncapsulatedVariable : _encapsulated\n0..*
    AOperation o-up-> AInstruction : _args\n0..*

}

@enduml
